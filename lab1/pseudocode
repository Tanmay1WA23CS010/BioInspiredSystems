START

  SET population size (POP_SIZE)
  SET chromosome length (CHROMOSOME_LENGTH)
  SET number of generations (GENERATIONS)
  SET mutation rate (MUTATION_RATE)
  SET crossover rate (CROSSOVER_RATE)

  FUNCTION fitness(x):
    RETURN x * x   // fitness is x squared

  // Step 1: Initialize population with random chromosomes
  population = generate POP_SIZE random binary strings of length CHROMOSOME_LENGTH

  FOR generation from 1 to GENERATIONS DO:

    PRINT "Generation", generation

    // Step 2: Calculate fitness for each chromosome
    FOR each chromosome in population DO:
      decode chromosome to integer value x
      calculate fitness using fitness(x)
      store fitness values in fitness_list

    PRINT population with their fitness values

    // Step 3: Roulette Wheel Selection to create mating pool
    total_fitness = sum of all fitness values
    probabilities = list where each probability = fitness / total_fitness

    mating_pool = select POP_SIZE chromosomes from population based on probabilities

    // Step 4: Generate new population using crossover and mutation
    new_population = empty list

    WHILE size of new_population < POP_SIZE DO:

      randomly select parent1 and parent2 from mating_pool

      // Crossover
      generate a random number r between 0 and 1
      IF r < CROSSOVER_RATE THEN:
        randomly select crossover point between 1 and CHROMOSOME_LENGTH - 1
        child1 = first part of parent1 + second part of parent2
        child2 = first part of parent2 + second part of parent1
      ELSE:
        child1 = parent1
        child2 = parent2

      // Mutation (bit-flip)
      FOR each bit in child1 DO:
        flip the bit with probability MUTATION_RATE
      FOR each bit in child2 DO:
        flip the bit with probability MUTATION_RATE

      add child1 and child2 to new_population

    population = first POP_SIZE chromosomes from new_population

    PRINT new_population

  END FOR

  // Step 5: Find best chromosome in the final population
  best_chromosome = chromosome with highest fitness in population
  best_value = decoded integer of best_chromosome
  best_fitness = fitness(best_value)

  PRINT best_chromosome, best_value, best_fitness

END
